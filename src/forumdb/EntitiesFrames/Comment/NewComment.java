package forumdb.EntitiesFrames.Comment;

import EntitiesClasses.Comment;
import EntitiesClasses.Question;
import EntitiesClasses.User;
import Help.JTextFieldLimit;
import forumdb.EntitiesFrames.User.NewUser;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;

/**
 *
 * @author Masha
 */
public class NewComment extends javax.swing.JDialog {

    Connection c;
    Comment editItem;
    List<Question> list;
    List<Comment> list1;
    List<User> list2;

    /**
     * Creates new form NewQuestion
     *
     * @param parent
     * @param modal
     * @param c
     */
    public NewComment(java.awt.Frame parent, boolean modal, Connection c) {
        super(parent, modal);
        initComponents();
        this.c = c;

        combos();
    }

    public NewComment(java.awt.Frame parent, boolean modal, Connection c, Comment u) {
        super(parent, modal);
        initComponents();
        this.c = c;
        editItem = u;
        combos();
        fillFields();
    }

    private void combos() {
        ((AbstractDocument) text.getDocument()).setDocumentFilter(new JTextFieldLimit(1024));

        list = new ArrayList<>();
        list1 = new ArrayList<>();
        list2 = new ArrayList<>();

        try {
            Statement statement = c.createStatement();
            ResultSet rs = statement.executeQuery("SELECT * FROM question");
            while (rs.next()) {
                Question item = new Question(rs.getInt("id"),
                        rs.getString("name"), rs.getString("question_text"),
                        rs.getInt("section_id"), rs.getInt("user_id"),
                        rs.getInt("state_id"));

                list.add(item);
            }
            question.setModel(new DefaultComboBoxModel(list.toArray()));

            rs = statement.executeQuery("SELECT * FROM forum_user");
            while (rs.next()) {
                User item = new User(rs.getInt("id"), rs.getString("login"),
                        rs.getString("password"), rs.getString("mail"),
                        rs.getString("date_of_registration"),
                        rs.getInt("status_id"), rs.getString("second_name"),
                        rs.getString("first_name"), rs.getString("patronymic"));
                list2.add(item);
            }
            user.setModel(new DefaultComboBoxModel(list2.toArray()));

            list1.add(null);
            rs = statement.executeQuery("SELECT * FROM comment where question_id="
                    + ((Question) question.getSelectedItem()).getId() + ";");
            while (rs.next()) {
                Comment item = new Comment(rs.getInt("id"), 
                        rs.getString("comment_text"), rs.getInt("question_id"), 
                        rs.getInt("comment_id"), rs.getInt("user_id"));

                list1.add(item);
            }
            comment.setModel(new DefaultComboBoxModel(list1.toArray()));
        } catch (SQLException ex) {
            Logger.getLogger(NewUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillFields() {
        text.setText(editItem.getCommentText());

        question.setSelectedItem(-1);
        comment.setSelectedItem(-1);
        user.setSelectedItem(-1);

        for (Question s : list) {
            if (s.getId() == editItem.getQuestionId()) {
                question.setSelectedItem((s));
            }
        }
        for (Comment s : list1) {
            if (s != null && s.getId() == editItem.getCommentId()) {
                comment.setSelectedItem((s));
            }
        }
        for (User s : list2) {
            if (s.getId() == editItem.getUserId()) {
                user.setSelectedItem((s));
            }
        }
    }

    public boolean check() {
        if ("".equals(text.getText())) {
            JOptionPane.showMessageDialog(new JFrame(), "Text cannot be empty");
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        question = new javax.swing.JComboBox<>();
        comment = new javax.swing.JComboBox<>();
        user = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New comment");

        text.setColumns(20);
        text.setRows(5);
        jScrollPane1.setViewportView(text);

        question.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionActionPerformed(evt);
            }
        });

        jButton1.setText("Done");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Comment text");

        jLabel2.setText("Questoin");

        jLabel3.setText("Comment");

        jLabel4.setText("User");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(user, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(question, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(jButton1)))
                .addContainerGap(431, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(27, 27, 27)
                .addComponent(jButton1)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement insert = null;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        if (!check()) {
            return;
        }
        try {
            
            Statement statement = c.createStatement();
            if (editItem == null) {
                String updateString
                        = "insert into comment (comment_text, "
                        + "question_id,comment_id,user_id) values ( ? ,?,?,?);";

                insert = c.prepareStatement(updateString);
                insert.setString(1, text.getText());
                insert.setInt(2, ((Question) question.getSelectedItem()).getId());
                if ((comment.getSelectedItem() == null)) {
                    insert.setNull(3, 0);
                } else {
                    insert.setInt(3, ((Comment) comment.getSelectedItem()).getId());
                }
                insert.setInt(4, ((User) user.getSelectedItem()).getId());
                insert.executeUpdate();

            } else {
                statement.executeUpdate("update comment set comment_text='" 
                        + text.getText() + "',question_id='" 
                        + ((Question) question.getSelectedItem()).getId() 
                        + "',comment_id=" + ((comment.getSelectedItem() == null) 
                                ? "null" 
                                : ("'" + ((Comment) comment.getSelectedItem()).getId()) + "'") 
                        + ",user_id='" + ((User) user.getSelectedItem()).getId() 
                        + "' where id=" + editItem.getId() + ";");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(new JFrame(), ex.getMessage());
            return;
        }
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void questionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionActionPerformed
         list1 = new ArrayList<>();

        try {
            Statement statement = c.createStatement();
            ResultSet rs;
            list1.add(null);
            rs = statement.executeQuery(
                    "SELECT * FROM comment where question_id=" 
                            + ((Question) question.getSelectedItem()).getId() + ";");
            while (rs.next()) {
                Comment item = new Comment(rs.getInt("id"), 
                        rs.getString("comment_text"), rs.getInt("question_id"), 
                        rs.getInt("comment_id"), rs.getInt("user_id"));

                list1.add(item);
            }
            comment.setModel(new DefaultComboBoxModel(list1.toArray()));
        } catch (SQLException ex) {
            Logger.getLogger(NewUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_questionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comment;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> question;
    private javax.swing.JTextArea text;
    private javax.swing.JComboBox<String> user;
    // End of variables declaration//GEN-END:variables
}
